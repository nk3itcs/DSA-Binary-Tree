 bool checkPath(TreeNode *root,TreeNode *node,vector<TreeNode*> &path){
        if(root==NULL)
            return NULL;
        path.push_back(root);
        if(root->val== node->val)
            return true;
        if(checkPath(root->left,node,path) || checkPath(root->right,node,path))
            return true;
        
        path.pop_back();
        return false;
        
    }
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        
        if(root==NULL)
            return NULL;
        vector<TreeNode*> pPath;
        vector<TreeNode*> qPath;

        checkPath(root,p,pPath);
        checkPath(root,q,qPath);
        
        TreeNode *ans;
        int i=0;
        while(i<pPath.size() and i<qPath.size()){
            if(pPath[i]->val==qPath[i]->val)
                ans=pPath[i];
            i++;
        }
        return ans;
    }
};
