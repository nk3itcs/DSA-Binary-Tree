/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
    private:
    void checkParent(TreeNode *root,unordered_map<TreeNode*,TreeNode*> &parentMark){
        queue<TreeNode*> nodesQ;
        nodesQ.push(root);

        while(!nodesQ.empty()){
            TreeNode *current=nodesQ.front();
            nodesQ.pop();
            if(current->left){
                parentMark[current->left]=current;
                nodesQ.push(current->left);
            }
            if(current->right){
                parentMark[current->right]=current;
                nodesQ.push(current->right);
            }
        }
    }
public:
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        if(root==NULL)
            return {};
        unordered_map<TreeNode*,TreeNode*> parentMark;
        checkParent(root,parentMark);
        unordered_map<TreeNode*,bool> visited;
        queue<TreeNode*> q;
        q.push(target);
        visited[target]=true;

        int curr_level=0;

        while(!q.empty()){
            int size=q.size();
            if(curr_level++==k)
                break;
            for(int i=0;i<size;i++){
                TreeNode *current=q.front();
                q.pop();
                if(current->left and !visited[current->left]){
                    q.push(current->left);
                    visited[current->left]=true;
                }
                if(current->right and !visited[current->right]){
                    q.push(current->right);
                    visited[current->right]=true;
                }
                if(parentMark[current] and !visited[parentMark[current]]){
                    q.push(parentMark[current]);
                    visited[parentMark[current]]=true;
                }
            }
        }
        vector<int> ans;
        while(!q.empty()){
            ans.push_back(q.front()->val);
            q.pop();
        }
        return ans;
    }
};
